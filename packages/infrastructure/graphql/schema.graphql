type Query {
  me: Me @aws_cognito_user_pools
  productGet(id: ID!): Product @aws_api_key @aws_cognito_user_pools
  productList(filter: ProductFilterInput, limit: Int, nextToken: String): ProductConnection
    @aws_api_key
    @aws_cognito_user_pools
  imageGet(id: ID!): Image @aws_api_key @aws_cognito_user_pools
  imageList(filter: ImageFilterInput, limit: Int, nextToken: String): ImageConnection
    @aws_api_key
    @aws_cognito_user_pools
  cartGet(id: ID): Cart @aws_api_key @aws_cognito_user_pools
  orderGet(id: ID): Order @aws_api_key @aws_cognito_user_pools
  invoiceGet(id: ID): Invoice @aws_api_key @aws_cognito_user_pools
}

type Me @aws_cognito_user_pools {
  user: User
  profile: Profile
  cart: Cart
}

type User @aws_api_key @aws_cognito_user_pools {
  id: ID
  username: ID
}

type Image @aws_api_key @aws_cognito_user_pools {
  id: ID!
  url: AWSURL
  title: String
  type: String
}

type ImageConnection @aws_api_key @aws_cognito_user_pools {
  items: [Image]
  nextToken: String
}

type Product @aws_api_key @aws_cognito_user_pools {
  id: ID!
  title: String
  description: String
  logoUrl: String
  price: Float
}

type Cart @aws_api_key @aws_cognito_user_pools {
  id: ID!
  products: [Product]
  user: User
}

type Order @aws_api_key @aws_cognito_user_pools {
  id: ID!
  cart: Cart
  user: User
}

type Invoice @aws_api_key @aws_cognito_user_pools {
  id: ID!
  order: Order
  user: User
}

type ProductConnection @aws_api_key @aws_cognito_user_pools {
  items: [Product]
  nextToken: String
}

type Profile @aws_api_key @aws_cognito_user_pools {
  id: ID!
  firstName: String
  lastName: String
  address: String
  zip: String
  city: String
}

input ProductFilterInput {
  id: IDFilterInput
  title: StringFilterInput
}

input ImageFilterInput {
  id: IDFilterInput
}

input BooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input FloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input IDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input IntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input StringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

type Mutation @aws_api_key @aws_cognito_user_pools {
  imageUpsert(input: ImageInput!): Image
  imageDelete(id: ID!): Image
  profileUpsert(input: ProfileInput!): Profile
  profileDelete(id: ID!): Profile
  productUpsert(input: ProductInput!): Product
  productDelete(id: ID!): Product
  cartUpsert(input: CartUpsertInput!): Cart
  orderForCart(input: OrderForCartInput!): Order
  invoiceForOrder(input: InvoiceForOrderInput!): Invoice
}

input OrderForCartInput {
  cartId: ID!
}

input InvoiceForOrderInput {
  orderId: ID!
}

input CartUpsertInput {
  id: ID!
  productIds: [ID]
  expire: Int
}

input ImageInput {
  id: ID
}

input ProductInput {
  id: ID
  title: String
  price: Float
  description: String
  logoUrl: String
}

input ProfileInput {
  id: ID
  firstName: String
  lastName: String
}

type Subscription @aws_api_key @aws_cognito_user_pools {
  upsertedProduct: Product @aws_subscribe(mutations: ["productUpsert"])
  deletedProduct: Product @aws_subscribe(mutations: ["productDelete"])
}
